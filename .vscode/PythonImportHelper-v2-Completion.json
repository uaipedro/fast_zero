[
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "StaticPool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "fast_zero.database",
        "description": "fast_zero.database",
        "isExtraImport": true,
        "detail": "fast_zero.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "fast_zero.database",
        "description": "fast_zero.database",
        "isExtraImport": true,
        "detail": "fast_zero.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "fast_zero.database",
        "description": "fast_zero.database",
        "isExtraImport": true,
        "detail": "fast_zero.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "fast_zero.database",
        "description": "fast_zero.database",
        "isExtraImport": true,
        "detail": "fast_zero.database",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "isExtraImport": true,
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "isExtraImport": true,
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "isExtraImport": true,
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "isExtraImport": true,
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "isExtraImport": true,
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "isExtraImport": true,
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserList",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserPartial",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "isExtraImport": true,
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "isExtraImport": true,
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "fast_zero.settings",
        "description": "fast_zero.settings",
        "isExtraImport": true,
        "detail": "fast_zero.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "fast_zero.settings",
        "description": "fast_zero.settings",
        "isExtraImport": true,
        "detail": "fast_zero.settings",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "isExtraImport": true,
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "def read_root():\n    return {'message': 'Olá Mundo!'}\ndatabase = []  # database in memory\n@app.post('/users/', status_code=201, response_model=UserPublic)\ndef create_user(user: UserSchema, session: Session = Depends(get_session)):\n    db_user = session.scalar(\n        select(User).where(User.username == user.username)\n    )\n    if db_user:\n        raise HTTPException(",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "def create_user(user: UserSchema, session: Session = Depends(get_session)):\n    db_user = session.scalar(\n        select(User).where(User.username == user.username)\n    )\n    if db_user:\n        raise HTTPException(\n            status_code=400, detail='Username already registered'\n        )\n    hashed_password = get_password_hash(user.password)\n    db_user = User(",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "list_users",
        "kind": 2,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "def list_users(\n    skip: int = 0, limit: int = 100, session: Session = Depends(get_session)\n):\n    users = session.scalars(select(User).offset(skip).limit(limit)).all()\n    return {'users': users}\n@app.put('/users/{user_id}', response_model=UserPublic)\ndef update_user(\n    user_id: int,\n    user: UserPartial,\n    session: Session = Depends(get_session),",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "def update_user(\n    user_id: int,\n    user: UserPartial,\n    session: Session = Depends(get_session),\n    current_user=Depends(get_current_user),\n):\n    if current_user.id != user_id:\n        raise HTTPException(status_code=400, detail='Not enough permissions')\n    for field, value in user.model_dump(exclude_unset=True).items():\n        if field == 'password':",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "def delete_user(\n    user_id: int,\n    session: Session = Depends(get_session),\n    current_user=Depends(get_current_user),\n):\n    if current_user.id != user_id:\n        raise HTTPException(status_code=400, detail='Not enough permissions')\n    session.delete(current_user)\n    session.commit()\n    return {'detail': 'User deleted'}",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "login_for_access_token",
        "kind": 2,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    session: Session = Depends(get_session),\n):\n    user = session.scalar(select(User).where(User.email == form_data.username))\n    if not user:\n        raise HTTPException(\n            status_code=400, detail='Incorrect email or password'\n        )\n    if not verify_password(form_data.password, user.password):",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "app = FastAPI()\n@app.get('/')\ndef read_root():\n    return {'message': 'Olá Mundo!'}\ndatabase = []  # database in memory\n@app.post('/users/', status_code=201, response_model=UserPublic)\ndef create_user(user: UserSchema, session: Session = Depends(get_session)):\n    db_user = session.scalar(\n        select(User).where(User.username == user.username)\n    )",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "fast_zero.app",
        "description": "fast_zero.app",
        "peekOfCode": "database = []  # database in memory\n@app.post('/users/', status_code=201, response_model=UserPublic)\ndef create_user(user: UserSchema, session: Session = Depends(get_session)):\n    db_user = session.scalar(\n        select(User).where(User.username == user.username)\n    )\n    if db_user:\n        raise HTTPException(\n            status_code=400, detail='Username already registered'\n        )",
        "detail": "fast_zero.app",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "fast_zero.database",
        "description": "fast_zero.database",
        "peekOfCode": "def get_session():\n    with Session(engine) as session:\n        yield session",
        "detail": "fast_zero.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "fast_zero.database",
        "description": "fast_zero.database",
        "peekOfCode": "engine = create_engine(Settings().DATABASE_URL)\ndef get_session():\n    with Session(engine) as session:\n        yield session",
        "detail": "fast_zero.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\nclass User(Base):\n    __tablename__ = 'users'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n    email: Mapped[str]\n    password: Mapped[str]",
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "fast_zero.models",
        "description": "fast_zero.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str]\n    email: Mapped[str]\n    password: Mapped[str]",
        "detail": "fast_zero.models",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class UserSchema(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\nclass UserPublic(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    model_config = ConfigDict(from_attributes=True)\nclass UserPartial(BaseModel):",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserPublic",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class UserPublic(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    model_config = ConfigDict(from_attributes=True)\nclass UserPartial(BaseModel):\n    username: Optional[str] = None\n    email: Optional[EmailStr] = None\n    password: Optional[str] = None\nclass UserDB(UserSchema):",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserPartial",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class UserPartial(BaseModel):\n    username: Optional[str] = None\n    email: Optional[EmailStr] = None\n    password: Optional[str] = None\nclass UserDB(UserSchema):\n    id: int\nclass UserList(BaseModel):\n    users: list[UserPublic] = []\nclass Message(BaseModel):\n    detail: str",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserDB",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class UserDB(UserSchema):\n    id: int\nclass UserList(BaseModel):\n    users: list[UserPublic] = []\nclass Message(BaseModel):\n    detail: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "UserList",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class UserList(BaseModel):\n    users: list[UserPublic] = []\nclass Message(BaseModel):\n    detail: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    username: str | None = None",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class Message(BaseModel):\n    detail: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    username: str | None = None",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    username: str | None = None",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "fast_zero.schemas",
        "description": "fast_zero.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    username: str | None = None",
        "detail": "fast_zero.schemas",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({'exp': expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef get_password_hash(password: str):\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "def get_password_hash(password: str):\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)\noauth2_scheme = OAuth2PasswordBearer(tokenUrl='token')\nasync def get_current_user(\n    session: Session = Depends(get_session),\n    token: str = Depends(oauth2_scheme),\n):\n    credentials_exception = HTTPException(",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)\noauth2_scheme = OAuth2PasswordBearer(tokenUrl='token')\nasync def get_current_user(\n    session: Session = Depends(get_session),\n    token: str = Depends(oauth2_scheme),\n):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail='Could not validate credentials',",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "SECRET_KEY = 'your-secret'\nALGORITHM = 'HS256'\nACCESS_TOKEN_EXPIRE_MINUTES = 30\npwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({'exp': expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "ALGORITHM = 'HS256'\nACCESS_TOKEN_EXPIRE_MINUTES = 30\npwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({'exp': expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef get_password_hash(password: str):",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\npwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({'exp': expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef get_password_hash(password: str):\n    return pwd_context.hash(password)",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({'exp': expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef get_password_hash(password: str):\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str):",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "fast_zero.security",
        "description": "fast_zero.security",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='token')\nasync def get_current_user(\n    session: Session = Depends(get_session),\n    token: str = Depends(oauth2_scheme),\n):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail='Could not validate credentials',\n        headers={'WWW-Authenticate': 'Bearer'},\n    )",
        "detail": "fast_zero.security",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "fast_zero.settings",
        "description": "fast_zero.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file='.env', env_file_encoding='utf-8'\n    )\n    DATABASE_URL: str",
        "detail": "fast_zero.settings",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.91f64c6ca4eb_create_users_table",
        "description": "migrations.versions.91f64c6ca4eb_create_users_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('password', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.91f64c6ca4eb_create_users_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.91f64c6ca4eb_create_users_table",
        "description": "migrations.versions.91f64c6ca4eb_create_users_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.91f64c6ca4eb_create_users_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option('sqlalchemy.url', Settings().DATABASE_URL)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def session():\n    engine = create_engine(\n        'sqlite:///:memory:',\n        connect_args={'check_same_thread': False},\n        poolclass=StaticPool,\n    )\n    Session = sessionmaker(bind=engine)\n    Base.metadata.create_all(engine)\n    yield Session()\n    Base.metadata.drop_all(engine)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def client(session):\n    def get_session_override():\n        return session\n    with TestClient(app) as client:\n        app.dependency_overrides[get_session] = get_session_override\n        yield client\n    app.dependency_overrides.clear()\n@pytest.fixture\ndef user(session):\n    user = User(",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def user(session):\n    user = User(\n        username='Teste',\n        email='teste@test.com',\n        password=get_password_hash('testtest'),\n    )\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    user.clean_password = 'testtest'",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def token(client, user):\n    response = client.post(\n        '/token',\n        data={'username': user.email, 'password': user.clean_password},\n    )\n    return response.json()['access_token']",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_root_deve_retornar_200_e_ola_mundo",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_root_deve_retornar_200_e_ola_mundo(client):\n    response = client.get('/')\n    assert response.status_code == 200\n    assert response.json() == {'message': 'Olá Mundo!'}\ndef test_create_user(client):\n    response = client.post(\n        '/users/',\n        json=fake_user,\n    )\n    assert response.status_code == 201",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_create_user(client):\n    response = client.post(\n        '/users/',\n        json=fake_user,\n    )\n    assert response.status_code == 201\n    assert response.json() == fake_user_with_id\ndef test_read_users(client, user):\n    user_schema = UserPublic.model_validate(user).model_dump()\n    response = client.get('/users/')",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_read_users",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_read_users(client, user):\n    user_schema = UserPublic.model_validate(user).model_dump()\n    response = client.get('/users/')\n    assert response.json() == {'users': [user_schema]}\ndef test_update_user(client, user, token):\n    response = client.put(\n        '/users/1',\n        headers={'Authorization': f'Bearer {token}'},\n        json={'username': 'bob'},\n    )",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_update_user",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_update_user(client, user, token):\n    response = client.put(\n        '/users/1',\n        headers={'Authorization': f'Bearer {token}'},\n        json={'username': 'bob'},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        'id': 1,\n        'username': 'bob',",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_delete_user",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_delete_user(client, user, token):\n    response = client.delete(\n        '/users/1',\n        headers={'Authorization': f'Bearer {token}'},\n    )\n    assert response.status_code == 200\n    assert response.json() == {'detail': 'User deleted'}\n    response = client.get('/users/')\n    assert response.status_code == 200\n    assert response.json() == {'users': []}",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_should_return_400_when_updating_other_user",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_should_return_400_when_updating_other_user(client, user, token):\n    response = client.put(\n        '/users/5',\n        headers={'Authorization': f'Bearer {token}'},\n        json={'username': 'bob'},\n    )\n    assert response.status_code == 400\ndef test_should_return_400_when_deleting_other_user(client, user, token):\n    response = client.delete(\n        '/users/5',",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_should_return_400_when_deleting_other_user",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_should_return_400_when_deleting_other_user(client, user, token):\n    response = client.delete(\n        '/users/5',\n        headers={'Authorization': f'Bearer {token}'},\n    )\n    assert response.status_code == 400\ndef test_should_return_400_when_creating_user_with_existing_username(\n    client, user\n):\n    response = client.post(",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_should_return_400_when_creating_user_with_existing_username",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_should_return_400_when_creating_user_with_existing_username(\n    client, user\n):\n    response = client.post(\n        '/users/',\n        json={\n            'username': 'Teste',\n            'email': 'testando@outroemail.com',\n            'password': 'outro_password',\n        },",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_get_token",
        "kind": 2,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "def test_get_token(client, user):\n    response = client.post(\n        '/token',\n        data={'username': user.email, 'password': user.clean_password},\n    )\n    token = response.json()\n    assert response.status_code == 200\n    assert 'access_token' in token\n    assert 'token_type' in token",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "fake_user",
        "kind": 5,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "fake_user = {\n    'username': 'alice',\n    'email': 'alice@example.com',\n    'password': 'secret',\n}\nfake_user_with_id = {\n    'id': 1,\n    'username': 'alice',\n    'email': 'alice@example.com',\n}",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "fake_user_with_id",
        "kind": 5,
        "importPath": "tests.test_app",
        "description": "tests.test_app",
        "peekOfCode": "fake_user_with_id = {\n    'id': 1,\n    'username': 'alice',\n    'email': 'alice@example.com',\n}\ndef test_root_deve_retornar_200_e_ola_mundo(client):\n    response = client.get('/')\n    assert response.status_code == 200\n    assert response.json() == {'message': 'Olá Mundo!'}\ndef test_create_user(client):",
        "detail": "tests.test_app",
        "documentation": {}
    },
    {
        "label": "test_get_session",
        "kind": 2,
        "importPath": "tests.test_db",
        "description": "tests.test_db",
        "peekOfCode": "def test_get_session():\n    # Assuming you have imported the necessary dependencies and set up the engine\n    # Call the function and get the session object\n    session = next(get_session())\n    # Assert that the session object is not None\n    assert session is not None\ndef test_create_user(session):\n    new_user = User(username='alice', password='secret', email='teste@test')\n    session.add(new_user)\n    session.commit()",
        "detail": "tests.test_db",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "tests.test_db",
        "description": "tests.test_db",
        "peekOfCode": "def test_create_user(session):\n    new_user = User(username='alice', password='secret', email='teste@test')\n    session.add(new_user)\n    session.commit()\n    user = session.scalar(select(User).where(User.username == 'alice'))\n    assert user.username == 'alice'\n    assert user.password == 'secret'\n    assert user.email == 'teste@test'",
        "detail": "tests.test_db",
        "documentation": {}
    },
    {
        "label": "test_jwt",
        "kind": 2,
        "importPath": "tests.test_security",
        "description": "tests.test_security",
        "peekOfCode": "def test_jwt():\n    data = {'test': 'test'}\n    token = create_access_token(data)\n    decoded = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n    assert decoded['test'] == 'test'\n    assert decoded['exp']",
        "detail": "tests.test_security",
        "documentation": {}
    }
]