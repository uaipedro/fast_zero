[tool.poetry]
name = "fast-zero"
version = "0.1.0"
description = ""
authors = ["uaipedro <pedromambelli@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.11.*"
fastapi = "^0.105.0"
uvicorn = "^0.24.0.post1"
ruff = "^0.1.8"
pydantic = {extras = ["email"], version = "^2.5.2"}
sqlalchemy = "^2.0.23"
pydantic-settings = "^2.1.0"
alembic = "^1.13.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
jinja2 = "^3.1.2"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
taskipy = "^1.12.2"
blue = "^0.9.1"
httpx = "^0.25.2"
isort = "^5.13.2"
ruff = "^0.1.8"
factory-boy = "^3.3.0"

[tool.ruff]
line-length = 79
exclude = ['.venv', 'migrations']

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.isort]
profile = "black"
line_length = 79
extend_skip = ['migrations']

[tool.pytest.ini_options]
pythonpath = "."

[tool.blue]
extend-exclude = '(migrations/)'

[tool.taskipy.tasks]
lint = 'ruff . && blue --check . --diff'
format = 'blue .  && isort .'
run = 'uvicorn fast_zero.app:app --reload'
pre_test = 'task lint'
test = 'pytest -s -x --cov=fast_zero -vv'
post_test = 'coverage html'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
